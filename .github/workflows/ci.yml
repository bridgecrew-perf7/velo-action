name: CI

on: push

env:
  IMAGE: odacom/velo-action

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache environment
        id: cached_poetry
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-velo-action-${{ runner.os }}--${{ hashFiles('**/poetry.lock') }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.4"
          architecture: "x64"

      - run: |
          pip install poetry==1.1.6
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - if: steps.cached_poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

      - run: poetry run black --check --config=pyproject.toml .
      - run: poetry run flake8 --config='.flake8' .
      - run: poetry run pylint --rcfile=.pylintrc --fail-under=8 velo_action

  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Cache environment
        id: cached_poetry
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-velo-action-${{ runner.os }}--${{ hashFiles('**/poetry.lock') }}

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9.4"
          architecture: "x64"

      - run: |
          pip install poetry==1.1.6
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - if: steps.cached_poetry.outputs.cache-hit != 'true'
        run: |
          poetry install

      # - run: poetry run pytest . -c pytest.ini --capture=no -v -m "not docker"
      #   id: pytests

  ci-done:
    name: CI done
    runs-on: ubuntu-20.04
    needs:
      - lint
      - test
    steps:
      - run: echo "CI done!"

  build_and_push:
    runs-on: ubuntu-20.04
    name: Build & push
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # all history for all branches and tags.

      - uses: ./
        id: velo

      - run: |
          docker build -t "${{ env.IMAGE }}:${{ steps.velo.outputs.version }}" .
          docker tag "${{ env.IMAGE }}:${{ steps.velo.outputs.version }}" ${{ env.IMAGE }}:latest

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Wait on lint and test
        uses: lewagon/wait-on-check-action@v0.2
        with:
          ref: ${{ github.ref }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          running-workflow-name: build_and_push
          check-name: CI done

      - run: |
          docker push --all-tags ${{ env.IMAGE }}

  ci_build_done:
    name: Build done
    runs-on: ubuntu-20.04
    needs:
      - build_and_push
    steps:
      - run: echo "Build image and pushed!"
